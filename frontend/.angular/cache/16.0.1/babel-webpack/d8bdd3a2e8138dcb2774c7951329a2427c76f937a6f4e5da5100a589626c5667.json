{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { Room } from 'src/app/pages/draw/room.model';\nimport { Wall } from 'src/app/pages/draw/wall.model';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass RoomService {\n  constructor(http) {\n    this.http = http;\n    this.room = new Room();\n  }\n  calculateArea(points, triangles) {\n    let area = 0;\n    triangles.forEach(triangle => {\n      let AB = Math.sqrt((points[triangle[1]].x - points[triangle[0]].x) ** 2 + (points[triangle[1]].y - points[triangle[0]].y) ** 2);\n      let BC = Math.sqrt((points[triangle[2]].x - points[triangle[1]].x) ** 2 + (points[triangle[2]].y - points[triangle[1]].y) ** 2);\n      let CA = Math.sqrt((points[triangle[0]].x - points[triangle[2]].x) ** 2 + (points[triangle[0]].y - points[triangle[2]].y) ** 2);\n      let s = (AB + BC + CA) / 2;\n      area += Math.sqrt(s * (s - AB) * (s - BC) * (s - CA));\n      console.log(`${AB} ${BC} ${CA} ${s} ${area}`);\n    });\n    return Math.round(area * 10) / 10;\n  }\n  createRoom(points) {\n    console.log(\"points\");\n    console.log(points);\n    if (points.length < 4) return false;\n    for (let point = 1; point < points.length; point++) {\n      this.room.addWall(points[point - 1], points[point]);\n    }\n    this.room.addWall(points[points.length - 1], points[0]);\n    return true;\n  }\n  getRooms() {\n    return this.http.get(environment.API_URL + '/rooms').pipe(map(data => {\n      return data.map(roomData => {\n        const walls = roomData.walls.map(wallData => new Wall(wallData.finish, wallData.start, wallData.angle, wallData.length));\n        return new Room(roomData.area, roomData.created, roomData.id, roomData.name, walls);\n      });\n    }));\n  }\n  saveRoom() {\n    console.log(this.room);\n    return this.http.post(environment.API_URL + '/rooms', this.room);\n  }\n}\nRoomService.ɵfac = function RoomService_Factory(t) {\n  return new (t || RoomService)(i0.ɵɵinject(i1.HttpClient));\n};\nRoomService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RoomService,\n  factory: RoomService.ɵfac,\n  providedIn: 'root'\n});\nexport { RoomService };","map":{"version":3,"names":["map","Room","Wall","environment","RoomService","constructor","http","room","calculateArea","points","triangles","area","forEach","triangle","AB","Math","sqrt","x","y","BC","CA","s","console","log","round","createRoom","length","point","addWall","getRooms","get","API_URL","pipe","data","roomData","walls","wallData","finish","start","angle","created","id","name","saveRoom","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/nadia/Documents/floor/frontend/src/app/services/room/room.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Point } from 'src/app/pages/draw/point.model';\nimport { Room } from 'src/app/pages/draw/room.model';\nimport { Wall } from 'src/app/pages/draw/wall.model';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoomService {\n  private room: Room;\n\n  constructor(private http: HttpClient) {\n    this.room = new Room;\n  }\n\n  calculateArea(points: Point[], triangles: number[][]): number {\n    let area = 0;\n    triangles.forEach(triangle => {\n      let AB = Math.sqrt((points[triangle[1]].x - points[triangle[0]].x) ** 2 + (points[triangle[1]].y - points[triangle[0]].y) ** 2);\n      let BC = Math.sqrt((points[triangle[2]].x - points[triangle[1]].x) ** 2 + (points[triangle[2]].y - points[triangle[1]].y) ** 2);\n      let CA = Math.sqrt((points[triangle[0]].x - points[triangle[2]].x) ** 2 + (points[triangle[0]].y - points[triangle[2]].y) ** 2);\n      let s = (AB + BC + CA) / 2;\n      area += Math.sqrt(s * (s - AB) * (s - BC) * (s - CA));\n      console.log(`${AB} ${BC} ${CA} ${s} ${area}`);\n    })\n    return Math.round(area * 10) / 10;\n  }\n\n  createRoom(points: Point[]): boolean {\n    console.log(\"points\");\n    console.log(points);\n    if (points.length < 4) return false;\n    for (let point = 1; point < points.length; point++) {\n      this.room.addWall(points[point - 1], points[point]);\n    }\n    this.room.addWall(points[points.length - 1], points[0]);\n    return true;\n  }\n\n  getRooms(): Observable<Room[]> {\n    return this.http.get<any[]>(environment.API_URL + '/rooms').pipe(map(data => {\n        return data.map(roomData => {\n          const walls: Wall[] = roomData.walls.map((wallData: any) => new Wall(wallData.finish, wallData.start, wallData.angle, wallData.length));\n          return new Room(roomData.area, roomData.created, roomData.id, roomData.name, walls);\n        });\n      })\n    );\n  }\n\n  saveRoom(): Observable<Room> {\n    console.log(this.room);\n    return this.http.post<Room>(environment.API_URL + '/rooms', this.room);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}